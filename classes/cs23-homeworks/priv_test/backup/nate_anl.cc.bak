#include "nate.h"
int maxDepth = 2;

int analyzeFor(char *newBoard, char gg, char bg, int depth);

//  
// selectRandom: selects a random, valid move
//
int selectRandom(char *board) { 
  int rmove = 64, 
      notfound = 1;
  while (notfound > 0) {
#ifdef DEBUG
    if ((notfound++) > 16) 
      cerr << "** More than 16 Random #'s required to find valid move!" << endl;
#endif
    rmove = (rand() % 64);
    if (board[rmove] == ' ') notfound = 0;
    }
  return rmove;
  }

// 
// findBest: find a good move for playe 'forWho' on the board realBoard, 
//           recursively. Returns a number (1..BOARD_SZ) for the best move found.
//
int findBest(char forWho, char *newBoard) {
  int bestmv  = BOARD_SZ,
      winmv   = BOARD_SZ,
      blockmv = BOARD_SZ,
      best    = 2,
      x = 0,
      i = 0;
  char otherguy;
#ifdef PROFILE
  time_t starttime, endtime;
  time(&starttime);
  cerr << "--Starting move." << endl;
#endif
#ifdef DEBUG
  cerr << "#" << i << " " << newBoard << endl;
#endif
  otherguy = ( forWho == 'x' ) ? 'o' : 'x';
  for (i = 0; i < BOARD_SZ ; i++) {
#ifdef DEBUG
    cerr << endl << "#" << i << ": " << newBoard[i] << " ";
#endif
    if (newBoard[i] != ' ') continue;

    newBoard[i] = otherguy;
    if (wonAdj((const char *) newBoard, i)) blockmv = i;
#ifdef DEBUG
    cerr << "(" << newBoard[i] << ", "; 
    cerr << winner(newBoard) << ", ";
    cerr << (wonAdj((const char *) newBoard, i) ? "True" : "False") << ") ";
#endif

    newBoard[i] = forWho;
    if (wonAdj((const char *) newBoard, i)) winmv = i;
#ifdef DEBUG
    cerr << "(" << newBoard[i] << ", " << winner(newBoard) << ", " << (wonAdj((const char *) newBoard, i) ? "True" : "False") << ") ";
#endif
    if ((winmv == BOARD_SZ) && (blockmv == BOARD_SZ)) 
      x = analyzeFor(newBoard, otherguy, forWho, 0);
// ((forWho == 'x') ? analyzeO(newBoard, 0) : analyzeX(newBoard, 0));
    newBoard[i] = ' ';
#ifdef DEBUG
    cerr << "(x=" << x << ", " << bestmv << ", " << winmv << ", " << blockmv << ") ";
#endif
    if (winmv != BOARD_SZ) break;
    if (x < best) {     // changed from x<1 so that we have something
      best = x;         // even if we're about to lose
      bestmv = i;
      }
    if (x == -1) break; 
    }
#ifdef PROFILE
  time(&endtime);
  cerr << "-- Time to move: " << (endtime - starttime) << " Seconds @ Depth " << maxDepth << endl;
#endif
#ifdef DEBUG
  if (best == 3) { 
    if (BoardFull((const char *) newBoard)) {
      cerr << "** Full board detected in findBest!" << endl;
      assert(0);
      }
    cerr << "** No moves found on unfull board in findBest!" << endl;
    assert(0);
    }
#endif
  if (winmv != BOARD_SZ) return winmv;
  if (blockmv != BOARD_SZ) return blockmv;
  if (bestmv == BOARD_SZ) bestmv = selectRandom(newBoard);
#ifdef DEBUG
  cerr << endl << "Bestmv: " << bestmv << endl;
#endif
  return bestmv;
  }

// 
// analyzeX: analyze a proposed move for player 'x' on the board newBoard, 
//           recursively. 
//
// Returns: 0 if a tie is possible
//          1 if a block is possible
//          2 if a win is possible 
//
int analyzeFor(char *newBoard, char gg, char bg, int depth) {
  int x = 2,
      move = 2;
  if (BoardFull(newBoard)) return 0;
  for (int i = 0; i < BOARD_SZ ; i++)
    if (newBoard[i] == ' ') {
      newBoard[i] = gg;
      if (wonAdj(newBoard, i)) { 
        newBoard[i] = ' ';
        return 2;
        }
      newBoard[i] = ' ';
      }
  if (depth >= maxDepth) return 0;
  for (int i = 0; i < BOARD_SZ ; i++) 
    if (newBoard[i] == ' ') {
      newBoard[i] = 'x';
      x = analyzeFor(newBoard, bg, gg, depth + 1);
      newBoard[i] = ' ';
      if (x < move) move = x;
      if (move == 0) break; 
    }
  return 2-move;
  }


//// 
//// analyzeX: analyze a proposed move for player 'x' on the board realBoard, 
////           recursively. returns 1 if a win is possible, 0 if a tie is possible
////           and -1 if neither is possible.
////
//int analyzeX(char *newBoard, int depth) {
//  int x, 
//      rval = 2;
//  char c = winner(newBoard);
//  if (c == 'x') return 1; 
//  if (c == 't') return 0; 
//  if (c == 'o') return -1; 
//  if (depth >= maxDepth) return 2;
//  for (int i = (BOARD_SZ-1); i >= 0 ; i--) {
//    if (newBoard[i] != ' ') continue;
//    newBoard[i] = 'x';
//    x = analyzeO(newBoard, depth + 1);
//    newBoard[i] = ' ';
//    if (x < rval) rval = x;
//    if (x == 0) break; 
//    }
//  return (rval == 2) ? 2 : (0 - rval);
//  }
