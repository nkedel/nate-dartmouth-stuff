

Terminals which are not used:

   BADTOKEN


Conflict in state 18 between rule 20 and token '+' resolved as reduce.
Conflict in state 18 between rule 20 and token '-' resolved as reduce.
Conflict in state 18 between rule 20 and token '*' resolved as reduce.
Conflict in state 32 between rule 17 and token '+' resolved as reduce.
Conflict in state 32 between rule 17 and token '-' resolved as reduce.
Conflict in state 32 between rule 17 and token '*' resolved as shift.
Conflict in state 33 between rule 18 and token '+' resolved as reduce.
Conflict in state 33 between rule 18 and token '-' resolved as reduce.
Conflict in state 33 between rule 18 and token '*' resolved as shift.
Conflict in state 34 between rule 19 and token '+' resolved as reduce.
Conflict in state 34 between rule 19 and token '-' resolved as reduce.
Conflict in state 34 between rule 19 and token '*' resolved as reduce.
Conflict in state 35 between rule 16 and token '+' resolved as shift.
Conflict in state 35 between rule 16 and token '-' resolved as shift.
Conflict in state 35 between rule 16 and token '*' resolved as shift.
State 38 contains 1 shift/reduce conflict.
State 39 contains 1 shift/reduce conflict.

Grammar
rule 1    code -> stmtList
rule 2    stmtList ->		/* empty */
rule 3    stmtList -> stmtList stmt
rule 4    stmt -> exprStmt
rule 5    stmt -> compoundStmt
rule 6    stmt -> ifStmt
rule 7    exprStmt -> expr ';'
rule 8    exprStmt -> ';'
rule 9    exprStmt -> error ';'
rule 10   compoundStmt -> '{' stmtList '}'
rule 11   ifStmt -> IF '(' expr ')' stmt
rule 12   ifStmt -> IF '(' expr ')' stmt ELSE stmt
rule 13   ifStmt -> IF '(' error ')' stmt
rule 14   ifStmt -> IF '(' error ')' stmt ELSE stmt
rule 15   @1 ->		/* empty */
rule 16   expr -> ID @1 '=' expr
rule 17   expr -> expr '+' expr
rule 18   expr -> expr '-' expr
rule 19   expr -> expr '*' expr
rule 20   expr -> '-' expr
rule 21   expr -> '(' expr ')'
rule 22   expr -> NUM
rule 23   expr -> ID
rule 24   expr -> '(' error ')'

Terminals, with rules where they appear

$ (-1)
'(' (40) 11 12 13 14 21 24
')' (41) 11 12 13 14 21 24
'*' (42) 19
'+' (43) 17
'-' (45) 18 20
';' (59) 7 8 9
'=' (61) 16
'{' (123) 10
'}' (125) 10
error (256) 9 13 14 24
NUM (258) 22
ID (259) 16 23
BADTOKEN (260)
IF (261) 11 12 13 14
ELSE (262) 12 14
UMINUS (263)

Nonterminals, with rules where they appear

code (18)
    on left: 1
stmtList (19)
    on left: 2 3, on right: 1 3 10
stmt (20)
    on left: 4 5 6, on right: 3 11 12 13 14
exprStmt (21)
    on left: 7 8 9, on right: 4
compoundStmt (22)
    on left: 10, on right: 5
ifStmt (23)
    on left: 11 12 13 14, on right: 6
expr (24)
    on left: 16 17 18 19 20 21 22 23 24, on right: 7 11 12 16 17 18
    19 20 21
@1 (25)
    on left: 15, on right: 16


state 0

    $default	reduce using rule 2 (stmtList)

    code	go to state 44
    stmtList	go to state 1



state 1

    code  ->  stmtList .   (rule 1)
    stmtList  ->  stmtList . stmt   (rule 3)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '(' 	shift, and go to state 9

    $   	reduce using rule 1 (code)

    stmt	go to state 10
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 2

    exprStmt  ->  error . ';'   (rule 9)

    ';' 	shift, and go to state 15



state 3

    expr  ->  NUM .   (rule 22)

    $default	reduce using rule 22 (expr)



state 4

    expr  ->  ID . @1 '=' expr   (rule 16)
    expr  ->  ID .   (rule 23)

    '=' 	reduce using rule 15 (@1)
    $default	reduce using rule 23 (expr)

    @1  	go to state 16



state 5

    ifStmt  ->  IF . '(' expr ')' stmt   (rule 11)
    ifStmt  ->  IF . '(' expr ')' stmt ELSE stmt   (rule 12)
    ifStmt  ->  IF . '(' error ')' stmt   (rule 13)
    ifStmt  ->  IF . '(' error ')' stmt ELSE stmt   (rule 14)

    '(' 	shift, and go to state 17



state 6

    expr  ->  '-' . expr   (rule 20)

    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 18



state 7

    exprStmt  ->  ';' .   (rule 8)

    $default	reduce using rule 8 (exprStmt)



state 8

    compoundStmt  ->  '{' . stmtList '}'   (rule 10)

    $default	reduce using rule 2 (stmtList)

    stmtList	go to state 19



state 9

    expr  ->  '(' . expr ')'   (rule 21)
    expr  ->  '(' . error ')'   (rule 24)

    error	shift, and go to state 20
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 21



state 10

    stmtList  ->  stmtList stmt .   (rule 3)

    $default	reduce using rule 3 (stmtList)



state 11

    stmt  ->  exprStmt .   (rule 4)

    $default	reduce using rule 4 (stmt)



state 12

    stmt  ->  compoundStmt .   (rule 5)

    $default	reduce using rule 5 (stmt)



state 13

    stmt  ->  ifStmt .   (rule 6)

    $default	reduce using rule 6 (stmt)



state 14

    exprStmt  ->  expr . ';'   (rule 7)
    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)

    '+' 	shift, and go to state 22
    '-' 	shift, and go to state 23
    '*' 	shift, and go to state 24
    ';' 	shift, and go to state 25



state 15

    exprStmt  ->  error ';' .   (rule 9)

    $default	reduce using rule 9 (exprStmt)



state 16

    expr  ->  ID @1 . '=' expr   (rule 16)

    '=' 	shift, and go to state 26



state 17

    ifStmt  ->  IF '(' . expr ')' stmt   (rule 11)
    ifStmt  ->  IF '(' . expr ')' stmt ELSE stmt   (rule 12)
    ifStmt  ->  IF '(' . error ')' stmt   (rule 13)
    ifStmt  ->  IF '(' . error ')' stmt ELSE stmt   (rule 14)

    error	shift, and go to state 27
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 28



state 18

    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)
    expr  ->  '-' expr .   (rule 20)


    $default	reduce using rule 20 (expr)



state 19

    stmtList  ->  stmtList . stmt   (rule 3)
    compoundStmt  ->  '{' stmtList . '}'   (rule 10)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '}' 	shift, and go to state 29
    '(' 	shift, and go to state 9

    stmt	go to state 10
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 20

    expr  ->  '(' error . ')'   (rule 24)

    ')' 	shift, and go to state 30



state 21

    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)
    expr  ->  '(' expr . ')'   (rule 21)

    '+' 	shift, and go to state 22
    '-' 	shift, and go to state 23
    '*' 	shift, and go to state 24
    ')' 	shift, and go to state 31



state 22

    expr  ->  expr '+' . expr   (rule 17)

    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 32



state 23

    expr  ->  expr '-' . expr   (rule 18)

    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 33



state 24

    expr  ->  expr '*' . expr   (rule 19)

    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 34



state 25

    exprStmt  ->  expr ';' .   (rule 7)

    $default	reduce using rule 7 (exprStmt)



state 26

    expr  ->  ID @1 '=' . expr   (rule 16)

    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    '-' 	shift, and go to state 6
    '(' 	shift, and go to state 9

    expr	go to state 35



state 27

    ifStmt  ->  IF '(' error . ')' stmt   (rule 13)
    ifStmt  ->  IF '(' error . ')' stmt ELSE stmt   (rule 14)

    ')' 	shift, and go to state 36



state 28

    ifStmt  ->  IF '(' expr . ')' stmt   (rule 11)
    ifStmt  ->  IF '(' expr . ')' stmt ELSE stmt   (rule 12)
    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)

    '+' 	shift, and go to state 22
    '-' 	shift, and go to state 23
    '*' 	shift, and go to state 24
    ')' 	shift, and go to state 37



state 29

    compoundStmt  ->  '{' stmtList '}' .   (rule 10)

    $default	reduce using rule 10 (compoundStmt)



state 30

    expr  ->  '(' error ')' .   (rule 24)

    $default	reduce using rule 24 (expr)



state 31

    expr  ->  '(' expr ')' .   (rule 21)

    $default	reduce using rule 21 (expr)



state 32

    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr '+' expr .   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)

    '*' 	shift, and go to state 24

    $default	reduce using rule 17 (expr)



state 33

    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr '-' expr .   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)

    '*' 	shift, and go to state 24

    $default	reduce using rule 18 (expr)



state 34

    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)
    expr  ->  expr '*' expr .   (rule 19)


    $default	reduce using rule 19 (expr)



state 35

    expr  ->  ID @1 '=' expr .   (rule 16)
    expr  ->  expr . '+' expr   (rule 17)
    expr  ->  expr . '-' expr   (rule 18)
    expr  ->  expr . '*' expr   (rule 19)

    '+' 	shift, and go to state 22
    '-' 	shift, and go to state 23
    '*' 	shift, and go to state 24

    $default	reduce using rule 16 (expr)



state 36

    ifStmt  ->  IF '(' error ')' . stmt   (rule 13)
    ifStmt  ->  IF '(' error ')' . stmt ELSE stmt   (rule 14)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '(' 	shift, and go to state 9

    stmt	go to state 38
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 37

    ifStmt  ->  IF '(' expr ')' . stmt   (rule 11)
    ifStmt  ->  IF '(' expr ')' . stmt ELSE stmt   (rule 12)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '(' 	shift, and go to state 9

    stmt	go to state 39
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 38

    ifStmt  ->  IF '(' error ')' stmt .   (rule 13)
    ifStmt  ->  IF '(' error ')' stmt . ELSE stmt   (rule 14)

    ELSE	shift, and go to state 40

    ELSE	[reduce using rule 13 (ifStmt)]
    $default	reduce using rule 13 (ifStmt)



state 39

    ifStmt  ->  IF '(' expr ')' stmt .   (rule 11)
    ifStmt  ->  IF '(' expr ')' stmt . ELSE stmt   (rule 12)

    ELSE	shift, and go to state 41

    ELSE	[reduce using rule 11 (ifStmt)]
    $default	reduce using rule 11 (ifStmt)



state 40

    ifStmt  ->  IF '(' error ')' stmt ELSE . stmt   (rule 14)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '(' 	shift, and go to state 9

    stmt	go to state 42
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 41

    ifStmt  ->  IF '(' expr ')' stmt ELSE . stmt   (rule 12)

    error	shift, and go to state 2
    NUM 	shift, and go to state 3
    ID  	shift, and go to state 4
    IF  	shift, and go to state 5
    '-' 	shift, and go to state 6
    ';' 	shift, and go to state 7
    '{' 	shift, and go to state 8
    '(' 	shift, and go to state 9

    stmt	go to state 43
    exprStmt	go to state 11
    compoundStmt	go to state 12
    ifStmt	go to state 13
    expr	go to state 14



state 42

    ifStmt  ->  IF '(' error ')' stmt ELSE stmt .   (rule 14)

    $default	reduce using rule 14 (ifStmt)



state 43

    ifStmt  ->  IF '(' expr ')' stmt ELSE stmt .   (rule 12)

    $default	reduce using rule 12 (ifStmt)



state 44

    $   	go to state 45



state 45

    $   	go to state 46



state 46

    $default	accept
