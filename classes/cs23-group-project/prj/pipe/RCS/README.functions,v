head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	96.05.17.03.06.33;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	96.05.15.03.23.22;	author nate;	state Exp;
branches;
next	;


desc
@functions list for pipe module.
@


1.2
log
@totally revised.
@
text
@* pipe_Init [TCLBuffer SCHEMEBuffer UNIXBuffer]
  Preconditions: dunno
  Arguments: 3 Buffer names, which must be empty buffer records for the 3
             standard interactive buffers.
  Action: Sets up initial pipes for TCL/Tk, Scheme, and UNIX as pipes 0, 1,
          and 2. Creates the buffers for TCL
  Returns: Error on failure.
  Called by: Buffer Manager
  Calls: pipe_Open
  Testing: Try calling with existing buffers, or with buffer records instead
           of global names of buffer records.
           Try calling twice.

* pipe_Shutdown []
  Preconditions: Some pipes should be open. Sort of pointless otherwise.
  Arguments: None.
  Action: Closes all pipes except for the Tcl pipe whice does not
          open/close. Deletes temporary files used by pipes system.
  Called by: Buffer Manager (?)
  Calls: pipe_Close
  Testing: Try calling with before pipe_Init, or a second time. Try
           accessing one of the standard pipes after use.

pipe_Destroy [buffer]
  Preconditions: buffer must be a valid interactive buffer
  Arguments: buffer
  Action: disassociates pipe from buffer, then calls edit_Destroy to close
          the buffer for reuse
  Returns: Error on failure.
  Called by: Buffer manager.
  Derivable from: text_Destroy
  Calls: edit_Destroy, pipe_Close
  Testing: Try calling on a nonexistant buffer.
	Try calling on a non-interactive buffer.
	Try accessing a pipe after it is destroyed.

// not sure this is really necesary... we could just let text_Copy work on
// this, ditto for text_Paste, though that would add a few complications.
* pipe_Copy [buffer]
  Preconditions: dunno
  Arguments: buffer is the active buffer
  Action: copies selected text from an interactive buffer to the user
          clipboard.
  Returns: error on failure
  Called by: user interface (indirectly via managers?)
  Derivable from: text_Copy (probably an exact copy?)
  Calls: edit_Copy
  Testing: Try calling with no selected text.
	   Try calling with an invalid buffer.
	   Try calling with an noninteractive buffer

#     Copies selected text to user clipboard
#     See also: text_Copy
#
* pipe_Paste [buffer]
  Preconditions: buffer must be a valid buffer, the user clipboard must
                 contain some text, the insertion point must be below the
                 to be submitted mark (the latest text returned from the
                 pipe.)
  Arguments: buffer is the interactive buffer to paste to
  Actions: copies the text from the selected text to the interactive
             buffer, at the insertion point.
  Called by: user interface (indirectly?)
  Calls: edit_Copy
  Testing: Try calling with an empty user clipboard.
	Try calling with the insertion point somewhere invalid.
	Try calling on an invalid or noninteractive buffer.

* pipe_submitSelected [buffer pipe#]
  Preconditions: dunno 
  Requirements:  buffer must be a valid interactive buffer, and the buffer
                 must have a valid text selection.
  Arguments: buffer
  Action: submits the selected text to the pipe associated with the buffer
          via the system clipboard
  Called by: user interface (indirectly?)
  Calls: pipe_fromBuffer, edit_Copy
  Testing: Try calling with no selected text (should do nothing)
           Try calling on a bad, or noninteractive buffer
	   Try calling with a bad pipe# or without one, or on a pipe which
           is closed.

* pipe_Submit [buffer pipe#]
  Preconditions:
  Requirements:  buffer must be a valid interactive buffer, and the buffer
                 must have a valid "to be submitted mark"
  Arguments: buffer
  Action: passes all text after the "to be submitted mark" to the pipe
          associated with buffer 
  Called by: user interface (indirectly?)
  Calls: edit_ExtractText, pipe_Write, pipe_setMark
  Testing: Try calling with on a noninteractive buffer.
	   Try calling on an "interactive" buffer without a mark.
	   Try calling on a pipe which has been closed, or with an invalid
	   pipe #, or without one.

# Related Functions
* text_toTCL [inbuffer]
* text_toSCHEME [inbuffer]
  Preconditions: 
  Requirements: inbuffer is a valid (text?) buffer, pipe_Init has been
	called.
  Arguments: inbuffer and outbuffer -- two buffers
  Action: pipes the complete text of buffer "inbuffer" to the standard TCL
          or Scheme pipes. Usually used system clipboard as the input buffer
  Called by: user interface (indirectly?)
  Calls: pipe_fromBuffer
  Testing: Call without pipe_Init having been called first.
	   Call without a valid inBuffer.
	   Call after pipe_Shutdown has been called.	   

* text_toUNIX [inbuffer, outbuffer]
  Preconditions:
  Requitements:  inbuffer is a valid (text?) buffer, outbuffer is a valid
                 but uncreated buffer 
  Arguments: inbuffer and outbuffer -- two buffers
  Action: creates a new UNIX pipe in buffer "outbuffer", pipes the complete text of buffer
          "inbuffer" to it, leaving us with a new interactive unix buffer
  Called by: user interface (indirectly?) 
  Calls: pipe_Open, pipe_fromBuffer
  Testing: see above (text_toTCL)

// *** For whoever does the buffer manager  ***
* edit_WhichPipe? (buffer)
  Preconditions: 
  Requirements: buffer is a valid interactive buffer
  Arguments: buffer
  Action: returns the pipe number associated with a buffer
  Called by: various pipe internal
  Calls: none
  Testing:

* edit_isBuffer? (buffer)
  - determins if Buffer is in fact a valid buffer.

* edit_bufferType? (buffer)
  - returns the type of the buffer, "help" "text" "pipe" or "invalid"

* edit_setPipe (buffer, pipe #)
  - sets the pipe associated with buffer # to pipe #

# Internal Functions
* pipe_toTCL [text]
  Preconditions: 
  requirements:  text is a valid null terminated text string. Can be
                 multi-line (include carriage returns)
  Arguments: text (a valid text string)
  Action: passes text to the TCL interpreter. Catches errors (if any). 
          Returns output of the TCL interpreter, in a text block, and a 
          report of caught errors (if any) by appending them to the buffer
          associated with the TCL pipe.
  Called by: text_toTCL via pipe_fromBuffer, pipe_fromBuffer, pipe_Write
	     edit_append
  Calls: nothing?
  Testing: try calling with an invalid TCL command/expression.
           try calling with nothing.

* pipe_Write(pipe number, text)
  Preconditions: 
  Requirements: pipe number is a valid, open pipe; text is valid 
                terminated text.
  Arguments: pipe #, text string
  Action: sends text to a selected pipe
  Called by: pipe_Submit
  Calls: none
  Testing: call with an invalid or closed pipe #.
	   call with an invalid text block.

* pipe_Read(pipe number)
  Preconditions: 
  Requirements: pipe number is a valid, open pipe other than the TCL pipe.
  Arguments: pipe #
  Action: appends  any data from  a selected pipe which is available to the
          buffer associated with that pipe.
  Called by: file event, automatically. File event set by pipe_Open
  Calls: edit_Append
  Testing: call with an invalid or closed pipe #.
	   call with an invalid text block.
	   call on a tcl pipe.

* pipe_Open(pipe command)
  Preconditions: 
  Requirements: command is a valid unix command or shell name or a special
                pipe name "scheme" (for /usr/local/bin/scheme) or "csh" for
		"/usr/ucb/csh -i" (our standard shell)
  * NOTE: LIMIT OF 1 internal TCL shell. 
  Arguments: text string containing the name of the command to run
  Action: starts up command, opening temporary input and output files to run
  Returns: pipe # of the new pipe
  Called by: various
  Calls: none
  Testing: call with invalid command. call with "tcl".
	call before pipe_Init.

* pipe_Close(pipe #)
  Preconditions: 
  Requirements: pipe # is a valid, open pipe.
  Arguments: pipe #
  Action: closes pipe, kills child program if necesary. Then reopens standard
	  scheme and unix pipes _if necesary_, otherwise sets pipe to closed
	  and sets the buffer associated with that pipe to _no pipe_
  Called by: various
  Calls: edit_setPipe
  Testing: call on tcl pipe. call on standard pipe. try calling pipe_Write
	   on a closed pipe. check ps listing after calling.

* pipe_fromBuffer [pipe num, buffer]
  Preconditions:
  Requirements:  pipe # is the name of a valid, open pipe, 
                 buffer is a valid buffer (any type?)
  Arguments: buffer, pipe #
  Action: sends the complete contents of the buffer to the pipe
  Called by: various
  Calls: nothing?
  Testing: call with pipe# as invalid or closed pipe.
           call with buffer# as empty or invalid buffer

* pipe_setMark [buffer]
  Preconditions: 
  Requirements: buffer must be a valid interactive pipe buffer.
  Arguments: buffer
  Action: moves the "to be submitted mark" and insertion point to the end of the text in
          the buffer.
  Called by: various.
  Calls: nothing? (edit_setMark [mark type?] ???)
  Testing: try calling on text buffer? 

* pipe_findMark [buffer]
  - returns coordinates of the "to be submitted mark", as per edit_Locate

// probably unnecesary. Consider deleted for now
//#   pipe_EOF? (pipe #)
//  Preconditions: pipe # is a valid pipe #. Returns true if end of pipe has
//                 been reached on read.
//  Arguments: a valid pipe #
//  Action: checks if pipe output file is being written/is read to end
//  Called by: various pipe internal
//  Calls: none
//  Testing:

@


1.1
log
@Initial revision
@
text
@d1 4
a4 3
* pipe_Init []
  Preconditions: Pipeline module may not have been previously initialized.
  Arguments: None.
d6 1
a6 1
          and 2. Verifies them.
d8 1
a8 1
  Called by: Buffer Manager (?)
d10 3
a12 2
  Testing: 

d15 1
a15 1
  Preconditions: Some pipes must be open.
d21 2
a22 1
  Testing:
d24 5
a28 8
* pipe_Create [buffer, type]
  Preconditions: pipe_Init must have been called successfully to open the
                 standard pipes. buffer must be a valid, uncreated, buffer
                 name 
  Arguments: Must be provided a buffer, and a number 0, 1, or 2
	     corresponding to the standard pipe (TCL, Scheme, or UNIX) to 
             use.
  Action: Creates a new interactive pipe in the buffer created.
d31 5
a35 16
  Derivable from: text_Create
  Calls: edit_Create, pipe_setMark
  Testing:

// ???
?* pipe_Destroy [buffer]
?  Preconditions: buffer must be a valid interactive buffer
?  Arguments: buffer
?  Action: disassociates pipe from buffer, then calls edit_Destroy to close
?          the buffer for reuse
?  Returns: Error on failure.
?  Called by: Buffer manager.
?  Derivable from: text_Destroy
?  Calls: edit_Destroy
?  Testing:
//
d37 2
d40 1
a40 1
  Preconditions: buffer must be a valid buffer, and have selected text.
d48 3
a50 1
  Testing: 
d65 7
a71 4
  Testing:

* pipe_submitSelected [buffer]
  Preconditions: buffer must be a valid interactive buffer, and the buffer
d78 8
a85 4
  Testing:

* pipe_Submit [buffer]
  Preconditions: buffer must be a valid interactive buffer, and the buffer
d91 5
a95 2
  Calls: edit_ExtractText, pipe_toTCL, pipe_Write, pipe_setMark
  Testing:
d98 5
a102 4
* text_toTCL [inbuffer, outbuffer]
* text_toSCHEME [inbuffer, outbuffer]
  Preconditions: inbuffer is a valid (text?) buffer, outbuffer is a valid
                 (text?) buffer
d105 1
a105 2
          or Scheme pipes, and overwrites outbuffer with the output from the
          pipe 
d107 4
a110 2
  Calls: edit_ClearAll, pipe_fromBuffer, pipe_toBuffer
  Testing:
d113 6
a118 6
  Preconditions: inbuffer is a valid (text?) buffer, outbuffer is a valid
                 (text?) buffer Arguments: inbuffer and outbuffer -- two
                 buffers
  Action: creates a new UNIX pipe, pipes the complete text of buffer
          "inbuffer" to it, and overwrites outbuffer with the output from
          the pipe, and then closes the new unix pipe
d120 11
a130 1
  Calls: edit_ClearAll, pipe_fromBuffer, pipe_toBuffer, pipe_Open, pipe_Close
d133 9
d144 2
a145 1
  Preconditions: text is a valid null terminated text string. Can be
d148 6
a153 4
  Action: passes text to the TCL interpreter. Catches errors (if any).
  Returns: output of the TCL interpreter, in a text block, and a report of 
           caught errors (if any)
  Called by: text_toTCL, pipe_Internal
d155 2
a156 1
  Testing:
d159 3
a161 2
  Preconditions: pipe number is a valid, open pipe; text is valid, null
                 terminated text.
d166 2
a167 1
  Testing:
d169 11
a179 16
* pipe_Which? (buffer)
  Preconditions: buffer is a valid interactive buffer
  Arguments: buffer
  Action: returns the pipe number associated with a buffer
  Called by: various pipe internal
  Calls: none
  Testing:

#   pipe_EOF? (pipe #)
  Preconditions: pipe # is a valid pipe #. Returns true if end of pipe has
                 been reached on read.
  Arguments: a valid pipe #
  Action: checks if pipe output file is being written/is read to end
  Called by: various pipe internal
  Calls: none
  Testing:
d182 5
a186 1
  Preconditions: command is a valid unix command or shell name
d192 2
a193 1
  Testing:
d196 2
a197 1
  Preconditions: pipe # is a valid, open pipe.
d199 3
a201 10
  Action: closes pipe, kills child program if necesary.
  Called by: various
  Calls: none
  Testing:

#   pipe_fromBuffer [pipe num, buffer]
  Preconditions: pipe num is the number of a valid, open pipe, 
                 buffer is a valid buffer (any type?)
  Arguments: buffer, pipe #
  Action: sends contents of buffer to pipe, via pipe input file.
d203 7
a209 5
  Calls: edit_Save
  Testing:

#   pipe_toBuffer [pipe num, buffer]
  Preconditions: pipe # is the name of a valid, open pipe, 
d212 1
a212 1
  Action: saves the output of a pipe to a buffer, from the pipe output file
d214 3
a216 2
  Calls: edit_Load
  Testing:
d218 3
a220 2
#   pipe_setMark [buffer]
  Preconditions: buffer must be a valid interactive pipe buffer.
d226 15
a240 1
  Testing:
@
