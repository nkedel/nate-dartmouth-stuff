head	1.4;
access;
symbols;
locks
	nate:1.4; strict;
comment	@// @;


1.4
date	98.06.02.08.03.58;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	98.06.02.06.16.53;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	98.05.30.05.33.10;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	98.05.30.05.04.45;	author nate;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#define MAIN
#include "game.h"

int main(int argc, char **argv) {
  init_map(argv[1]);
	init_player();
  init_monsters();
	init_screen();
	play_game();
	restore_screen();
	endwin();
  exit(0);
	}
	
void randomize(void) {
  time_t t;
  time(&t);
  initstate((unsigned) t,randomstate,64);
  }

void init_monsters(void) {
  int i, j, x, y;
  bool isgoodloc;
  for (i=0;i<n_monsters;i++) {
    isgoodloc = FALSE;
    while (!isgoodloc) {
      isgoodloc = TRUE;
      x = (random() % mapx);
      y = (random() % mapy);
      if (map[x][y] != '.') isgoodloc = FALSE;
      else {
        for (j=0; j<=n_monsters;j++) 
          if (i != j && monsters[j].getlive() && x == monsters[j].getX() && y == monsters[j].getY()) 
            isgoodloc = FALSE; 
        for (j=0; j<=n_players;j++) 
          if (i != j && players[j].getlive() && x == players[j].getX() && y == players[j].getY()) 
            isgoodloc = FALSE; 
        }
      }
    monsters[i].setX(x);
    monsters[i].setY(y);

    monsters[i].setHP(15);
    monsters[i].setAC(10);
    monsters[i].setDMG(20);
    monsters[i].setlive(TRUE);

    if (i < n_mon_names) {
      monsters[i].settile(mon_tiles[i]);
      monsters[i].setname(mon_names[i]);  
      }
    else  {
    	monsters[i].settile('g');
	    monsters[i].setname("Gremlin");  
      }
    }
  }
  
void print_status(char *msg) {
  int i;
  if (msg==NULL) return;
  mvaddch(22,0,' ');
  clrtoeol();
  i = (64 - strlen(msg)) / 2;
  mvprintw(22,i,"%s",msg);
  move(player->getY(),player->getX());
  refresh();
  napms(333);
  }

void init_player(void) {
  player = &players[0];
	player->setX(1);
	player->setY(1);
  player->setkills(0);
	player->setHP(100);
  player->setDMG(20);
  player->setAC(10);
	player->setXP(0);
  player->setname("Ned Flanders");
  player->setweapon("Fist");
  player->setarmor("Loin Cloth");
  }

void init_map(char *mappath) { 
  FILE *mapinput;
  char mapline[80];
  int i, j; 
  
  mapinput=fopen(mappath,"r");
  for (i=0; i<mapy; i++) { 
    fgets(mapline, 79, mapinput);
    for (j=0; j<mapx; j++) map[j][i]=mapline[j];
    }
  fclose(mapinput); 
  }
                          
void init_map(void) {
  int i, j;
  for (i=0; i<mapy; i++) 
    for (j=0; j<mapx; j++) {
      if (i == 0 || j == 0 || i == mapy - 1 || j == mapx -1 ) map[j][i]='#';
        else map[j][i]='.';
      }
  }

void draw_map(void) {
  int i, j;
  char line[80] = "";
  for (i=0; i<mapy; i++) {
    for (j=0; j<mapx; j++) {
      line[j] = map[j][i];
      }
    line[mapx]=0;
    mvprintw(i,0,"%s",line);
    }
  }

void play_game(void) {
	while (get_command()) {
    move_monsters();
	  }
	}

bool attack_succeeds(int ac) {
  if ((random() % 20) < ac) return TRUE;
  return FALSE;
  }

int damage(int dmg) {
  return (random() % dmg) + 1;
  }

void Player::attack_monster(int i) {
  char msg[128];
  if (attack_succeeds(monsters[i].getAC())) {
    monsters[i].setHP(monsters[i].getHP() - damage(player->getDMG()));
    sprintf(msg,"You hit %s %d",monsters[i].getname(),i);
    print_status(msg);
    if (monsters[i].getHP() < 0) {
      mvaddch(monsters[i].getY(),monsters[i].getX(),map[monsters[i].getX()][monsters[i].getY()]);
      monsters[i].setlive(false);
      monsters[i].setX(255);
      monsters[i].setY(255);
      player->setXP(player->getXP() + 10);
      player->setkills(player->getkills() + 1);
      mvprintw(7,66,"XP: %d   ",player->getXP());
      mvprintw(8,66,"Kills: %d   ",player->getkills());
      print_status("And it dies...");
      // broadcast "monster is dead" message
      } 
    return;
    }
  sprintf(msg,"You miss %s",monsters[i].getname());
  print_status(msg);
  }

void Player::attack_player(int i) {
  char msg[128];
  if (attack_succeeds(players[i].getAC())) {
    players[i].setHP(players[i].getHP() - damage(player->getDMG()));
    sprintf(msg,"You hit %s %d",players[i].getname(),i);
    print_status(msg);
    if (players[i].getHP() < 0) {
      mvaddch(players[i].getY(),players[i].getX(),map[players[i].getX()][players[i].getY()]);
      players[i].setlive(false);
      players[i].setX(255);
      players[i].setY(255);
      player->setXP(player->getXP() + 10);
      player->setkills(player->getkills() + 1);
      mvprintw(7,66,"XP: %d   ",player->getXP());
      mvprintw(8,66,"Kills: %d   ",player->getkills());
      print_status("And he dies...");
      // broadcast "You're dead" message
      } 
    return;
    }
  sprintf(msg,"You miss %s",players[i].getname());
  print_status(msg);
  }


int is_monster(int x, int y) {
  int i;
  for (i=0;i< n_monsters;i++) {
    if (monsters[i].getlive() && x == monsters[i].getX() && y == monsters[i].getY()) return i;
    }
  return -1;
  }
  
int is_player(int x, int y) {
  int i;
  for (i=0;i< n_players;i++) {
    if (players[i].getlive() && x == players[i].getX() && y == players[i].getY()) return true;
    }
  return -1;
  }
  
bool is_validmove(int x, int y) {
  if (map[x][y] == '.') return TRUE;
  return FALSE;
  }

void Player::resolve_move(int dx, int dy) {
  int newx = getX() + dx,
      newy = getY() + dy,
      i;

 if ((i=is_player(newx,newy)) != -1) {
    attack_player(i); 
    return;
    }

 if ((i=is_monster(newx,newy)) != -1) {
    attack_monster(i); 
    return;
    }

  if (is_validmove(newx, newy)) {
    do_move(newx, newy);
    return;
    }
  print_status("Duh -- where you trying to move to?");
  }

void Player::do_move(int x, int y) {
  mvaddch(player->getY(), player->getX(), map[player->getX()][player->getY()]);
  mvaddch(y,x,'@@');
  player->setY(y);
  player->setX(x); 
  move(player->getY(),player->getX());
  refresh();
  }

	
void restore_screen(void) {
  clear();
  nocbreak();
  refresh();
  }	
	
void show_monsters(void) {
  int i;
  for (i=0;i<n_monsters;i++)
    mvaddch(monsters[i].getY(),monsters[i].getX(),monsters[i].gettile());
  }

void 
Monster::moveto(int dx, int dy) {
  int ox = x, oy = y;
  mvaddch(oy,ox,map[ox][oy]);
  mvaddch(y=dy, x=dx, tile);
  move(player->getY(), player->getX());
  }

  
void move_monsters(void) {
  int i;
  if (n_monsters == player->getkills()) return;
  for (i=0; i<n_monsters; i++) 
    if (monsters[i].getlive()) monsters[i].do_move();
  }

// Kluge for now... we need to implement this
int get_nearestplayer(int x, int y) {
  return 0;
  }

void 
Monster::do_move(void)  
{
  int i;
  Player *p;
  int x = getX();
  int y = getY();
  int confused = random() & 1;
  if (confused) {
    x += ((random() % 3) - 1);
    y += ((random() % 3) - 1);
    if ((i = is_player(x,y)) != -1) {
      attack(i);
      return;
      }
    else if (is_monster(x,y) == -1 && is_validmove(x,y)) {
      moveto(x,y);  
      refresh();
      }      
    }
  else {
    i = get_nearestplayer(x,y);
    p = &players[i];
    if (p->getX() < x) x--;
    if (p->getX() > x) x++;
    if (p->getY() < y) y--;   
    if (p->getY() > y) y++;
    if ((i = is_player(x,y)) != -1) {
      attack(i);
      return;
      }
    if (is_validmove(x,y) && is_monster(x,y) == -1) {
      moveto(x,y);
      refresh();
    }
    else {
      if ((i=is_player(x,y)) != -1) attack(i);
      else {
	      x = getX();
	      y = getY();        
	      if (p->getX() < x) x--;
	      if (p->getX() > x) x++;
        if ((i = is_player(x,y)) != -1) {
          attack(i);
          return;
          }	      
        if (is_validmove(x,y) && is_monster(x,y) == -1) {
	        moveto(x,y);
	        refresh();
	        }
	      else {
	        x = getX();
	        if (p->getY() < y) y--;   
	        if (p->getY() > y) y++;      
	        if ((i = is_player(x,y)) != -1) {
            attack(i);
            return;
            }
          if (is_validmove(x,y) && is_monster(x,y) == -1) {
	          moveto(x,y);
	          refresh();
	          }
	        }
        }
      }
    }
  }


void 
Monster::attack(int i) {
  char msg[128];
  Player *p = &players[i];
  if (attack_succeeds(p->getAC())) {
    p->setHP(p->getHP() - damage(getDMG()));
    sprintf(msg,"%s hits!", name);
    mvprintw(6,66,"HP: %d   ",p->getHP());
    print_status(msg);
    if (p->getHP() < 0) {
      mvaddch(p->getY(),p->getX(),map[p->getX()][p->getY()]);
      p->setlive(false);
      p->setX(255);
      p->setY(255);
      print_status("You died...");
      napms(1333);
      exit(1);
      } 
    return;
    }
  sprintf(msg,"%s misses %s",name, p->getname());
  print_status(msg);
  }

	
void init_screen(void) {
	char *temp;
	initscr(); 
	cbreak(); 
	noecho();
	nonl();
	intrflush(stdscr, FALSE);
	keypad(stdscr, TRUE);
	clear();
	draw_map();
  mvaddch(player->getY(), player->getX(), '@@'); 
  show_monsters();
  mvprintw(1,66,"ThunderDome");
  mvprintw(2,66,"(Prototype)");
  mvprintw(4,66,"Player:");
  temp = player->getname();
  mvprintw(5,68,"%s",temp);
  delete(temp);
  mvprintw(6,66,"HP: %d   ",player->getHP());
  mvprintw(7,66,"XP: %d   ",player->getXP());
  mvprintw(8,66,"Kills: %d   ",player->getkills());
  mvprintw(10,66,"Weapon: ");
  temp=player->getweapon();
  mvprintw(11,68,"%s",temp);
  delete(temp);
  mvprintw(12,66,"Armor: ");
  temp=player->getarmor();
  mvprintw(13,68,"%s",temp);
  delete(temp);
  temp=player->getname();
  mvprintw(22,(36-strlen(temp))/2,"Welcome to the Thunderdome, %s",temp);  
  delete(temp);
	mvprintw(23,15,"...Two Men Enter, One Man Leaves...");
	refresh();
	}

  
bool get_command(void) {	
    if (player->getkills() == n_monsters) {
      win();
      return FALSE;
      }
    int x;
		x = getch();
		switch (x) {
			case 'q':
			case 'Q': 
					return FALSE;
					break;
			case KEY_UP:
			case '8':
			    player->resolve_move(0,-1); 
          break;
			case KEY_DOWN:
			case '2': 
          player->resolve_move(0,1);
					break;
			case KEY_LEFT:
			case '4': 
          player->resolve_move(-1,0);
					break;
			case KEY_RIGHT:
			case '6': 
          player->resolve_move(1,0);
          break;
			case KEY_A1:
			case '7': 
			    player->resolve_move(-1,-1);
					break;
			case KEY_A3:
			case '9': 
          player->resolve_move(1,-1);
					break;
			case KEY_C1:
			case '1': 
          player->resolve_move(-1,1);
					break;
			case KEY_C3: 
			case '3':
          player->resolve_move(1,1);
					break;
			default: break;
			}
  return TRUE;
	}

void win(void) {
  print_status("You win!");
  beep();
  beep();
  beep();
  napms(1333);
  }
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a3 7
const int mapx=64, mapy=22;
/*char map[64][22];*/
Monster gremlin[16];
Player player;
int  n_gremlins = 4;
char randomstate[64];

d22 1
a22 1
  int i;
d24 1
a24 1
  for (i=0;i<n_gremlins;i++) {
d28 11
a38 5
      gremlin[i].setX(random() % mapx);
      gremlin[i].setY(random() % mapy);
      if (map[gremlin[i].getX()][gremlin[i].getY()] != '.') isgoodloc = FALSE;
      if (gremlin[i].getX() == player.getX() && gremlin[i].getY() == player.getY()) 
        isgoodloc = FALSE; 
d40 11
a50 21
    gremlin[i].setHP(15);
    gremlin[i].setAC(10);
    gremlin[i].setDMG(20);
    gremlin[i].setlive(TRUE);

    if (i == 0)
      {
	gremlin[i].settile('X');
	gremlin[i].setname("Rong Xie - The Non-existant TA");  
      } else

    if (i == 1)
      {
	gremlin[i].settile('P');
	gremlin[i].setname("Dean Pelton");  
      } else

    if (i == 2)
      {
	gremlin[i].settile('J');
	gremlin[i].setname("Jimmy O");  
d52 3
a54 4
    else
      {
	gremlin[i].settile('g');
	gremlin[i].setname("Gremlin");  
d66 1
a66 1
  move(player.getY(),player.getX());
d72 11
a82 10
	player.setX(1);
	player.setY(1);
  player.setkills(0);
	player.setHP(100);
  player.setDMG(20);
  player.setAC(10);
	player.setXP(0);
  player.setname("Ned Flanders");
  player.setweapon("Fist");
  player.setarmor("Loin Cloth");
d134 1
a134 1
void resolve_attack(int i, int x, int y) {
d136 3
a138 3
  if (attack_succeeds(gremlin[i].getAC())) {
    gremlin[i].setHP(gremlin[i].getHP() - damage(player.getDMG()));
    sprintf(msg,"You hit %s %d",gremlin[i].getname(),i);
d140 9
a148 9
    if (gremlin[i].getHP() < 0) {
      mvaddch(gremlin[i].getY(),gremlin[i].getX(),map[gremlin[i].getX()][gremlin[i].getY()]);
      gremlin[i].setlive(false);
      gremlin[i].setX(255);
      gremlin[i].setY(255);
      player.setXP(player.getXP() + 10);
      player.setkills(player.getkills() + 1);
      mvprintw(7,66,"XP: %d   ",player.getXP());
      mvprintw(8,66,"Kills: %d   ",player.getkills());
d150 25
d178 1
a178 1
  sprintf(msg,"You miss %s %d",gremlin[i].getname(),i);
d182 2
a183 1
int is_attack(int x, int y) {
d185 2
a186 2
  for (i=0;i< n_gremlins;i++) {
    if (gremlin[i].getlive() && x == gremlin[i].getX() && y == gremlin[i].getY()) return i;
d191 4
a194 9
bool is_validmove(int x, int y) {
  if (map[x][y] == '.') return TRUE;
  if (map[x][y] == '#') {
    print_status("OUCH!");
    return FALSE;
    }
  if (map[x][y] == '~') {
    print_status("Sorry, no swimming!");
    return FALSE;
d196 1
a196 1
  return FALSE;
d198 2
a199 7

inline bool is_validmonstermove(int x, int y) {
  int i;
  if (is_monsterattack(x,y)) return FALSE;
  for (i=0; i< n_gremlins; i++) 
    if (gremlin[i].getlive() && x == gremlin[i].getX() && y == gremlin[i].getY()) 
      return FALSE;
d204 4
a207 4
inline bool is_monsterattack(int x, int y) {
  if (x == player.getX() && y == player.getY()) return TRUE;
  return FALSE;
  }
d209 4
a212 4
void resolve_move(int dx, int dy) {
  int newx = player.getX() + dx,
      newy = player.getY() + dy,
      i;
d214 2
a215 2
 if ((i=is_attack(newx,newy)) != -1) {
    resolve_attack(i, newx, newy); 
d218 1
d220 2
a221 1
    moveto(newx, newy);
d223 1
d226 2
a227 2
void moveto(int x, int y) {
  mvaddch(player.getY(), player.getX(), map[player.getX()][player.getY()]);
d229 3
a231 3
  player.setY(y);
  player.setX(x); 
  move(player.getY(),player.getX());
d244 2
a245 2
  for (i=0;i<n_gremlins;i++)
    mvaddch(gremlin[i].getY(),gremlin[i].getX(),gremlin[i].gettile());
d249 1
a249 1
Monster::move_gremlin(int dx, int dy, Player * player) {
d258 4
a261 4
  int i, x, y, confused;
  if (n_gremlins == player.getkills()) return;
  for (i=0; i<n_gremlins; i++) 
    gremlin[i].monstermove(&player, i);
d264 5
d270 1
a270 1
Monster::monstermove(Player * p, int num)  
d272 2
a273 1
  if (!live) return;
d280 6
a285 2
    if (is_validmonstermove(x,y)) {
      move_gremlin(x,y,p);  
d287 2
a288 2
    }      
  }
d290 2
d296 6
a301 2
    if (is_validmonstermove(x,y)) {
      move_gremlin(x,y,p);
d305 1
a305 3
      if (is_monsterattack(x,y)) {
	gremlin_attack(x,y,num, p);
      }
d307 26
a332 17
	x = getX();
	y = getY();        
	if (p->getX() < x) x--;
	if (p->getX() > x) x++;
	if (is_validmonstermove(x,y)) {
	  move_gremlin(x,y,p);
	  refresh();
	}
	else {
	  x = getX();
	  if (p->getY() < y) y--;   
	  if (p->getY() > y) y++;      
	  if (is_validmonstermove(x,y)) {
	    move_gremlin(x,y,p);
	    refresh();
	  }
	}
a335 2
}

a336 7
void 
Monster::gremlin_attack(int x, int y, int num, Player * p) {
  char output[128];
  sprintf(output,"%s %d attacks!",name, num);
  monster_resolve_attack(x, y, p, num);
  print_status(output);
  }
d339 1
a339 1
Monster::monster_resolve_attack(int x, int y, Player * p, int num) {
d341 1
d344 1
a344 1
    sprintf(msg,"%s %d hits!", name, num);
d349 1
a349 1
      //p->setlive(false);
d352 2
a353 1
      print_status("Player dies...");
d373 1
a373 1
  mvaddch(player.getY(), player.getX(), '@@'); 
d378 1
a378 1
  temp = player.getname();
d381 3
a383 3
  mvprintw(6,66,"HP: %d   ",player.getHP());
  mvprintw(7,66,"XP: %d   ",player.getXP());
  mvprintw(8,66,"Kills: %d   ",player.getkills());
d385 1
a385 1
  temp=player.getweapon();
d389 1
a389 1
  temp=player.getarmor();
d392 1
a392 1
  temp=player.getname();
d401 1
a401 1
    if (player.getkills() == n_gremlins) {
d414 1
a414 1
			    resolve_move(0,-1); 
d418 1
a418 1
          resolve_move(0,1);
d422 1
a422 1
          resolve_move(-1,0);
d426 1
a426 1
          resolve_move(1,0);
d430 1
a430 1
			    resolve_move(-1,-1);
d434 1
a434 1
          resolve_move(1,-1);
d438 1
a438 1
          resolve_move(-1,1);
d442 1
a442 1
          resolve_move(1,1);
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
char map[64][22];
d34 4
a37 4
      gremlin[i].x = random() % mapx;
      gremlin[i].y = random() % mapy;
      if (map[gremlin[i].x][gremlin[i].y] != '.') isgoodloc = FALSE;
      if (gremlin[i].x == player.getX() && gremlin[i].y == player.getY()) 
d40 27
a66 6
    gremlin[i].hp   = 15;
    gremlin[i].ac   = 10;
    gremlin[i].dmg  = 20;
    gremlin[i].live = TRUE;
    gremlin[i].tile = 'g';
    strcpy(gremlin[i].name,"Gremlin");
d145 4
a148 4
  char msg[64];
  if (attack_succeeds(gremlin[i].ac)) {
    gremlin[i].hp -= damage(player.getDMG());
    sprintf(msg,"You hit Gremlin %d",i);
d150 5
a154 5
    if (gremlin[i].hp < 0) {
      mvaddch(gremlin[i].y,gremlin[i].x,map[gremlin[i].x][gremlin[i].y]);
      gremlin[i].live=false;
      gremlin[i].x = 255;
      gremlin[i].y = 255;
d163 1
a163 1
  sprintf(msg,"You miss Gremlin %d",i);
d170 1
a170 1
    if (gremlin[i].live && x == gremlin[i].x && y == gremlin[i].y) return i;
d192 1
a192 1
    if (gremlin[i].live && x == gremlin[i].x && y == gremlin[i].y) 
d236 1
a236 1
    mvaddch(gremlin[i].y,gremlin[i].x,gremlin[i].tile);
d239 3
a241 2
void move_gremlin(int i, int x, int y) {
  int ox = gremlin[i].x, oy = gremlin[i].y;
d243 2
a244 2
  mvaddch(gremlin[i].y = y, gremlin[i].x = x, gremlin[i].tile);
  move(player.getY(), player.getX());
d246 1
d251 31
a281 12
  for (i=0; i<n_gremlins; i++) {
    if (gremlin[i].live != TRUE) continue;
    x = gremlin[i].x;
    y = gremlin[i].y;
    confused = random() & 1;
    if (confused) {
      x = x + ((random() % 3) - 1);
      y = y + ((random() % 3) - 1);
      if (is_validmonstermove(x,y)) {
        move_gremlin(i,x,y);  
        refresh();
        }      
a282 9
    else {
      if (player.getX() < x) x--;
      if (player.getX() > x) x++;
      if (player.getY() < y) y--;   
      if (player.getY() > y) y++;
      if (is_validmonstermove(x,y)) {
        move_gremlin(i,x,y);
        refresh();
        }
d284 17
a300 23
        if (is_monsterattack(x,y)) {
          gremlin_attack(i);
          }
        else {
          x = gremlin[i].x;
          y = gremlin[i].y;        
          if (player.getX() < x) x--;
          if (player.getX() > x) x++;
          if (is_validmonstermove(x,y)) {
            move_gremlin(i,x,y);
            refresh();
            }
          else {
            x = gremlin[i].x;
            if (player.getY() < y) y--;   
            if (player.getY() > y) y++;      
            if (is_validmonstermove(x,y)) {
              move_gremlin(i,x,y);
              refresh();
              }
            }
          }
        }
d304 8
a311 4
  
void gremlin_attack(int i) {
  char output[64];
  sprintf(output,"Gremlin %d attacks!",i);
d314 23
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
tMonster gremlin[16];
d37 2
a38 1
      if (gremlin[i].x == player.getX && gremlin[i].y == player.getY) isgoodloc = FALSE; 
d56 1
a56 1
  move(player.getY,player.getX);
d198 3
a200 1
  mvaddch(player.setY(y), player.setX(x), '@@'); 
d226 1
a226 1
  int i, x, y, brain;
d232 2
a233 2
    brain = random() & 1;
    if (brain) {
d236 1
a236 1
      if (is_validmonstermove(x,y))
d238 2
d246 28
a273 10
      if (is_monsterattack(x,y)) gremlin_attack(i);
      if (is_validmonstermove(x,y)) break;
      x = gremlin[i].x;
      y = gremlin[i].y;        
      if (player.getX() < x) x--;
      if (player.getX() > x) x++;
      if (is_validmonstermove(x,y)) break;
      x = gremlin[i].x;
      if (player.getY() < y) y--;   
      if (player.getY() > y) y++;      
a274 2
    if (is_validmonstermove(x,y))
      move_gremlin(i,x,y);  
a275 1
  refresh();
d313 3
a315 1
  mvprintw(22,(36-strlen(player.name))/2,"Welcome to the Thunderdome, %s",player.name);  
d322 1
a322 1
    if (player.kills == n_gremlins) {
@
