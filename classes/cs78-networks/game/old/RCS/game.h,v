head	1.4;
access;
symbols;
locks
	nate:1.4; strict;
comment	@ * @;


1.4
date	98.06.02.08.04.01;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	98.06.02.06.16.57;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	98.05.30.05.33.33;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	98.05.30.05.06.53;	author nate;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#include <stdio.h>
#include <curses.h>
#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

// kluge since curses.h for some reason doesn't define this!
extern "C" int napms(int ms);

class Player {
private:
  int x, y;
  int hp, xp, ac, dmg, kills;
  bool live;
  char * name;
  char * weapon;
  char * armor;
public:
  Player()  {name   = new char[32]; name[0] = 0;
             weapon = new char[32]; weapon[0] = 0;
             armor  = new char[32]; armor[0] = 0;
             live = false;
            }
            
  ~Player() {delete [] name; delete [] weapon; delete [] armor; }

  void setXY(int newx, int newy) { x = newx; y = newy; }
  void setX(int newx) { x = newx; }
  void setY(int newy) { y = newy; }
  void getXY(int& newx, int& newy) { newx = x; newy = y; }
  int getX(void) { return x; }
  int getY(void) { return y; }
  void setHP(int newHP)   { hp = newHP; }
  int  getHP(void)        { return hp;  }
  void setXP(int newXP)   { xp = newXP; }
  int  getXP(void)        { return xp;  }
  void setAC(int newAC)   { ac = newAC; }
  int  getAC(void)        { return ac;  }
  void setDMG(int newDMG) { dmg = newDMG; }
  int  getDMG(void)       { return dmg;   }
  void setkills(int newkills) 
                         { kills = newkills; }
  void setlive(bool alive) { live = alive; }
  bool getlive(void)       { return live; }
  int  getkills(void)    { return kills; }
  char* getarmor(void)   {return armor;  }
  char* getweapon(void)  {return weapon; }
  char* getname(void)    {return name;   }
  void setname(const char *newname)     { if (newname != NULL)   strcpy(name, newname);     }
  void setarmor(const char *newarmor)   { if (newarmor != NULL)  strcpy(armor, newarmor);   }
  void setweapon(const char *newweapon) { if (newweapon != NULL) strcpy(weapon, newweapon); }
  void do_move(int x, int y);
  void resolve_move(int dx, int dy);
  void attack_player(int i);
  void attack_monster(int i);
  };

class Monster {
 public:
  Monster()  {name = new char[32]; name[0] = 0; live = false;}
  ~Monster() {delete [] name;}


  void setXY(int newx, int newy) { x = newx; y = newy; }
  int setX(int newx) { x = newx; return x;}
  int setY(int newy) { y = newy; return y;}
  void getXY(int& newx, int& newy) { newx = x; newy = y; }
  int  getX(void) { return x; }
  int  getY(void) { return y; }
  void setHP(int newHP)   { hp = newHP; }
  int  getHP(void)        { return hp;  }
  void setAC(int newAC)   { ac = newAC; }
  int  getAC(void)        { return ac;  }
  void setlive(bool alive) { live = alive; }
  bool getlive(void)       { return live; }
  void setDMG(int newDMG) { dmg = newDMG; }
  int  getDMG(void)       { return dmg;   }

  void settile(int ntile) { tile = ntile; }
  int  gettile(void)       { return tile;   }

  char* getname(void)    {return name;}
  void setname(const char *newname)     { if (newname != NULL)   strcpy(name, newname);     }
  void do_move();
  void moveto(int dx, int dy);
  void attack(int i);

 private:
  int x, y;
  int hp, ac, dmg;
  char * name;
  int tile;
  bool live;
  };

void randomize(void);
void move_monsters(void);
void init_monsters(void);
void show_monsters(void);
void init_screen(void);
void restore_screen(void);
void play_game(void);
void init_map(char *map_path);
void init_player(void);
void draw_map(void);
void print_status(char *msg);
void win(void);

int is_player(int x, int y);
int is_monster(int x, int y);
bool is_validmove(int x, int y);
bool get_command(void);

#ifdef MAIN
const int mapx=64, mapy=22;
static char map[64][22];
Monster monsters[16];
Player *player;
Player players[8];
int me = 0;
int n_monsters = 4;
int n_players=1;
char randomstate[64];
const int n_mon_names = 4;
const char *mon_names[] = { "Evil Homer", "Marge", "Bart", "Lisa" }; 
const char mon_tiles[]  = { 'h', 'm', 'b', 'l' };
#else
extern const int mapx, mapy;
extern char map[64][22];
extern Monster monsters[16];
extern Player players[8];
extern int n_monsters;
extern int n_players;
extern char randomstate[64];
extern const int n_mon_names;
extern const char *mon_names;
extern const char mon_tiles;
#endif
@


1.3
log
@*** empty log message ***
@
text
@d8 2
a9 2
const int colors[7] = { COLOR_RED, COLOR_GREEN, COLOR_YELLOW, COLOR_BLUE,
                        COLOR_MAGENTA, COLOR_CYAN, COLOR_WHITE };
a10 2
char map[64][22];

d15 1
d17 2
a18 2
  char weapon[32];
  char armor[32];
d20 7
a26 2
  Player()  {name = new char[64];}
  ~Player() {delete [] name;}
d44 2
d47 10
a56 7
  char* getarmor(void)   { char *tmp = new char[32]; strcpy(tmp, armor); return tmp;  }
  char* getweapon(void)  { char *tmp = new char[32]; strcpy(tmp, weapon); return tmp; }  
  char* getname(void)   /* { char *tmp = new char[32]; strcpy(tmp, name); return tmp;   }  */
    {return name;}
  void setname(char *newname)     { if (newname != NULL)   strcpy(name, newname);     }
  void setarmor(char *newarmor)   { if (newarmor != NULL)  strcpy(armor, newarmor);   }
  void setweapon(char *newweapon) { if (newweapon != NULL) strcpy(weapon, newweapon); }
d61 1
a61 1
  Monster()  {name = new char[64];}
d83 5
a87 8
  char* getname(void)    /*{ char *tmp = new char[32]; strcpy(tmp, name); return tmp;   }  */
    {return name;}
  void setname(char *newname)     { if (newname != NULL)   strcpy(name, newname);     }
  void monstermove(Player * p, int num);
  void move_gremlin(int dx, int dy, Player * player);
  void gremlin_attack(int x, int y, int num, Player * p);

  void monster_resolve_attack(int x, int y, Player * p, int num);
a97 1
//void move_gremlin(int i, int x, int y);
a106 2
void moveto(int x, int y);
void resolve_move(int dx, int dy);
a107 2
void resolve_attack(int x, int y);
//void gremlin_attack(int i);
d110 2
a111 1
int is_attack(int x, int y);
a113 2
bool is_validmonstermove(int x, int y);
bool is_monsterattack(int x, int y);
d115 25
@


1.2
log
@*** empty log message ***
@
text
@d11 2
d17 1
a17 1
  char name[32];
d21 3
d43 2
a44 1
  char* getname(void)    { char *tmp = new char[32]; strcpy(tmp, name); return tmp;   }  
d51 33
a83 1
public:
d86 1
a86 1
  char name[32];
d92 1
a92 1
void move_gremlin(int i, int x, int y);
d106 1
a106 1
void gremlin_attack(int i);
@


1.1
log
@Initial revision
@
text
@d19 15
a33 15
  void Player::setXY(int newx, int newy) { x = newx; y = newy; }
  void Player::setX(int newx) { x = newx; }
  void Player::setY(int newy) { y = newy; }
  void Player::getXY(int& newx, int& newy) { newx = x; newy = y; }
  int Player::getX(void); { return x; }
  int Player::getY(void); { return y; }
  void Player::setHP(int newHP)   { hp = newHP; }
  int  Player::getHP(void)        { return hp;  }
  void Player::setXP(int newXP)   { xp = newXP; }
  int  Player::getXP(void)        { return xp;  }
  void Player::setAC(int newAC)   { ac = newAC; }
  int  Player::getAC(void)        { return ac;  }
  void Player::setDMG(int newDMG) { dmg = newDMG; }
  int  Player::getDMG(void)       { return dmg;   }
  void Player::setkills(int newkills) 
d35 7
a41 7
  int  Player::getkills(void)    { return kills; }
  char* Player::getarmor(void)   { char *tmp = new char[32]; strcpy(tmp, armor); return tmp;  }
  char* Player::getweapon(void)  { char *tmp = new char[32]; strcpy(tmp, weapon); return tmp; }  
  char* Player::getname(void)    { char *tmp = new char[32]; strcpy(tmp, name); return tmp;   }  
  void Player::setname(char *newname)     { if (newname != NULL)   strcpy(name, newname);     }
  void Player::setarmor(char *newarmor)   { if (newarmor != NULL)  strcpy(armor, newarmor);   }
  void Player::setweapon(char *newweapon) { if (newweapon != NULL) strcpy(weapon, newweapon); }
d45 1
d51 1
a51 1
  } tMonster;
@
